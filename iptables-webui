#!/usr/bin/env nodejs

/***************************************************\
 *
 * IP Tables Web UI
 * 
 * (c) 2015 Robert McLeod released under MIT Licence
 *
 * You may be thinking the start of this script is
 * a bit ugly, ignoring typical convention.  This
 * is only to make sure thingss start as fast as
 * possible.  No point waiting for everything to
 * load before finding that the port is in use.
*
\***************************************************/

// TODO: get command line options working
var PORT = 8099,
    HOME = "./iptables",
    LOCK = "./iptables-webui.pid";
    // LOCK = "/var/run/iptables-webui.pid";

var fs   = require("fs"),
    exec = require("child_process").exec;

// trap SIGINT to delete lockfile and exit
process.on("exit", function(code) {
  if ( fs.existsSync(LOCK) ) fs.unlinkSync(LOCK);
});

// check for root
// if ( process.getuid() != 0 ) {
//   console.error("ERROR: Must run as root");
//   process.exit(1);
// }

// TODO: check if the port is available

// function for checking/creating log file
var createLockFile = function(lockfile, callback) {
  fs.exists(lockfile, function(exists) {
    if (exists) {
      var pid = fs.readFileSync(lockfile);
      exec("ps -p "+pid, function(err, stdout) { // check if it's running
        if (err.code == 1) { // the process doesn't exist
          fs.writeFile(lockfile, process.pid, function(err){
            callback(err, process.pid);
          });
        } else { // the process exists
          var err = new Error("IP Tables WebUI is already running on PID "+process.pid);
          callback(err, process.pid);
        }
      });
    } else {
      fs.writeFile(lockfile, process.pid, function(err){
        callback(err, process.pid);
      });
    }
  });
};

// TODO: MAKE THIS SYNCHRONOUS
// check/set the lockfile
createLockFile(LOCK, function(err, pid) {
  if (err) {
    console.error(err.message);
    process.exit();
  }
});


// TODO: run setup here to 


var http    = require("http"),
    iprules = require("./lib/iprules"),
    express = require("express");

var app     = express(),
    server  = http.createServer(app);

// require faye and attach it to the server
// var _faye  = require("faye"),
//     bayeux = new _faye.NodeAdapter({mount: '/faye', timeout: 45}),
//     faye   = _faye.Client("http://localhost:"+PORT+"/faye");

// bayeux.attach(server);

iprules.init(HOME);

// setup static files
app.use(express.static(__dirname + '/public'));

app.get("/import", function(req, res) {
  if ( !req.params.path ) res.status(400).end();

  iprules.importRules(req.params.path, function(results) {
    res.status(200).json(results).end();
  });
});

app.get("/rules", function(req, res) {
  iprules.all(function(err, rules) {
    res.json(rules);
  });
});

app.get('/rules/:name', function(req, res) {
  var name = req.params.name
  if ( name.substring(name.length - 1) == "*" ) {
    iprules.find(name);
  }
});

// create rule
app.post("/rules/:name", function(req, res) {

});

// update rule
app.put("/rules/:name", function(req, res) {

});

app.delete('/rules/:name', function(req, res) {

});

app.put("/rules/:name/enable", function(req, res) {
  iprules.enable(req.params.name, function(err) {
    res.status(err ? 500 : 200).end();
  });
});

app.put("/rules/:name/disable", function(req, res) {
  iprules.disable(req.params.name, function(err) {
    res.status(err ? err.status || 500 : 200).end();
  });
});

app.get("/reload", function(req, res) {
  iprules.reload(function(err, result) {
    if ( err ) {
      res.json(err).status(500).end();
    } else {
      res.json(result).end();
    }
  });
});

app.post("/rules/:name/test", function(req, res) {
  iprules.test(req.params.name, function(err) {
    if ( err ) { res.status(400).json({message: err.message}).end(); }
    res.status(200).end();
  });
});


// Run setup first
exec("bin/setup "+HOME, function(err, stdout) {
  if ( err ) {
    console.error(err.message);
    process.exit(1);
  }

  console.log(stdout);
  
  // Start the WebUI
  app.listen(PORT, function() {
    console.log("Started IPTables WebUI on port "+PORT);
  });
});